package com.gelostech.automart.activitiesimport android.content.SharedPreferencesimport android.databinding.generated.callback.OnClickListenerimport android.support.v7.app.AppCompatActivityimport android.os.Bundleimport android.support.v7.app.AlertDialogimport android.text.TextUtilsimport android.view.MenuItemimport android.view.Viewimport android.widget.EditTextimport android.widget.ImageViewimport com.gelostech.automart.Rimport com.gelostech.automart.commoners.AppUtilsimport com.gelostech.automart.commoners.BaseActivityimport com.gelostech.automart.commoners.Kimport com.gelostech.automart.models.Partimport com.gelostech.automart.utils.*import com.mikepenz.fontawesome_typeface_library.FontAwesomeimport com.mikepenz.ionicons_typeface_library.Ioniconsimport com.synnapps.carouselview.ImageListenerimport kotlinx.android.synthetic.main.activity_part.*import kotlinx.android.synthetic.main.make_order.*import com.gelostech.automart.utils.PreferenceHelper.getimport com.google.gson.Gsonimport com.google.gson.JsonObjectimport okhttp3.*import org.jetbrains.anko.alertimport org.jetbrains.anko.toastimport timber.log.Timberimport java.io.IOExceptionclass PartActivity : BaseActivity(), ImageListener, View.OnClickListener {    private lateinit var part: Part    private lateinit var prefs: SharedPreferences    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_part)        prefs = PreferenceHelper.defaultPrefs(this)        part = intent.getSerializableExtra(K.PART) as Part        initViews()        loadPart()    }    private fun initViews() {        setSupportActionBar(toolbar)        supportActionBar?.setDisplayHomeAsUpEnabled(true)        supportActionBar?.setDisplayShowHomeEnabled(true)        supportActionBar?.title = part.name        if (part.sellerId == getUid()) isMyPart() else notMyPart()        carousel.pageCount = part.images.size        carousel.setImageListener(this)        seller_icon.setImageDrawable(AppUtils.setDrawable(this, FontAwesome.Icon.faw_user2, R.color.secondaryText, 15))        location_icon.setImageDrawable(AppUtils.setDrawable(this, Ionicons.Icon.ion_location, R.color.secondaryText, 15))        category_icon.setImageDrawable(AppUtils.setDrawable(this, FontAwesome.Icon.faw_list, R.color.secondaryText, 15))        order.setOnClickListener(this)        delete.setOnClickListener(this)    }    override fun setImageForPosition(position: Int, imageView: ImageView?) {        val keys = part.images.keys.toList()        imageView!!.scaleType =ImageView.ScaleType.CENTER_CROP        imageView.loadUrl(part.images[keys[position]]!!)    }    private fun loadPart() {        seller.text = part.sellerName        location.text = part.location        category.text = part.category        qty.text = part.quantity.toString()        unit.text = "${part.price}"    }    private fun isMyPart() {        order.hideView()        //contactSeller.hideView()        delete.showView()    }    private fun notMyPart() {        delete.hideView()        //contactSeller.showView()        order.showView()    }    override fun onClick(v: View?) {        when(v?.id) {            order.id -> {                val view = layoutInflater.inflate(R.layout.make_order,null,false)                val quantity = view.findViewById<EditText>(R.id.orderQuantity)                val location = view.findViewById<EditText>(R.id.orderLocation)                AlertDialog.Builder(this).setTitle("Make order").setView(view).setPositiveButton("ORDER") { x, y->                    if (!AppUtils.validated(quantity,location)){                        //return@setPositiveButton                    }                    makeOrder(quantity.text.toString(),location.text.toString())                }.setNegativeButton("CANCEL",null).create().show()            }            delete.id -> {                alert("Delete ${part.name}") {                    positiveButton("DELETE") {                        getFirestore().collection(K.PARTS).document(part.id!!).delete()                                .addOnSuccessListener {                                    toast("${part.name} deleted")                                    finish()                                    AppUtils.animateEnterLeft(this@PartActivity)                                }                    }                    negativeButton("CANCEL") {}                }.show()            }        }    }    private fun makeOrder(quantity: String, location: String) {        if (TextUtils.isEmpty(quantity) || TextUtils.isEmpty(location)) {            toast("Please fill all fields")            return        }        showLoading("Making order...")        val client = OkHttpClient()        val urlBuilder = HttpUrl.parse(K.MAKE_ORDER_URL)?.newBuilder()        urlBuilder?.addQueryParameter("part_id", part.id)        urlBuilder?.addQueryParameter("part_name", part.name)        urlBuilder?.addQueryParameter("buyer_id", getUid())        urlBuilder?.addQueryParameter("buyer_name", prefs[K.NAME])        urlBuilder?.addQueryParameter("seller_id", part.sellerId)        urlBuilder?.addQueryParameter("seller_name", part.sellerName)        urlBuilder?.addQueryParameter("location", location)        urlBuilder?.addQueryParameter("quantity", quantity)        urlBuilder?.addQueryParameter("image_url", part.image)        urlBuilder?.addQueryParameter("time", System.currentTimeMillis().toString())        val url = urlBuilder?.build().toString()        val request = Request.Builder().url(url).build()        client.newCall(request).enqueue(object: Callback {            override fun onFailure(call: Call?, e: IOException?) {                e?.printStackTrace()                runOnUiThread {                    hideLoading()                    toast("Error making order. Please try again")                }            }            override fun onResponse(call: Call?, response: Response?) {                runOnUiThread {                    hideLoading()                }                val res = response?.body()?.string()                Timber.e("RESULTS: $res")                if (response!!.isSuccessful) {                    try {                        val gson = Gson()                        val json = gson.fromJson(res, JsonObject::class.java)                        val resultCode = json["resultCode"].asInt                        runOnUiThread {                            when(resultCode){                                -1 -> {                                    alert(json["description"].asString, "Failed").show()                                }                                0 -> {                                    alert(json["description"].asString, "Success").show()                                    qty.text = json["available"].asString                                }                            }                        }                    }catch (e:Exception){}                }            }        })    }    override fun onOptionsItemSelected(item: MenuItem?): Boolean {        when(item?.itemId) {            android.R.id.home -> onBackPressed()        }        return true    }    override fun onBackPressed() {        super.onBackPressed()        AppUtils.animateEnterLeft(this)    }}